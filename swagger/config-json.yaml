apiVersion: v1
kind: ConfigMap
metadata:
  name: swagger
data:
  swagger.json: |
    {
      "openapi": "3.0.0",
      "info": {
        "description": "This is a REST API for the NONDAGO-GEOGRAMA project",
        "title": "NONDAGO-GEOGRAMA API REST",
        "contact": {
          "email": "sfigueroa@ceit.es"
        }
      },
      "servers": [
        {
          "url": "http://api-crate:8080",
          "description": "api-crate"
        }
      ],
      "basePath": "/",
      "tags": [
        {
          "name": "CrateDB",
          "description": "Tag created to test the API Crate that query CrateDB Timeserie Database."
        }
      ],
      "schemes": [
        "http",
        "https"
      ],
      "paths": {
        "/identity/v0.1/auth/tokens": {
          "get": {
            "tags": [
              "CrateDB"
            ],
            "summary": "Get Authorization Token",
            "description": "Get Authorization Token",
            "operationId": "token",
            "responses": {
              "201": {
                "description": "Created Token."
              },
              "400": {
                "description": "Invalid input"
              }
            }
          }
        },  
        "/lastState/v0.2/{org}/{dev}": {
          "get": {
            "security": [
              {
                 "bearerAuth": []
              }
           ],
            "tags": [
              "CrateDB"
            ],
            "summary": "Get the last state of an existing device",
            "description": "Select between different organizations, e.g.: org1, org2, org3 ... and devices, e.g.: agv, arm, robotarm, plc.",
            "operationId": "lastState",
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Org ID.",
                "required": true,
                "allowReserved": true,
                "schema": {
                  "type": "string",
                  "default": "openiot"
                }
              },
              {
                "name": "dev",
                "in": "path",
                "description": "Dev ID.",
                "required": true,
                "allowReserved": true,
                "schema": {
                  "type": "string",
                  "default": "tag"
                }
              }
            ], 
            "produces": [
              "application/json"
            ],
            "responses": {
              "201": {
                "description": "Success"
              },
              "401": {
                "description": "Access denied"
              },
              "404": {
                "description": "service not available"
              }
            }
          }
        },
        "/allStates/v0.2/{org}/{dev}": {
          "get": {
            "security": [
              {
                 "bearerAuth": []
              }
           ],
            "tags": [
              "CrateDB"
            ],
            "summary": "Get all states of an existing device",
            "description": "Select between different organizations, e.g.: org1, org2, org3 ... and devices, e.g.: agv, arm, robotarm, plc.",
            "operationId": "allState",
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Org ID.",
                "required": true,
                "allowReserved": true,
                "schema": {
                  "type": "string",
                  "default": "openiot"
                }
              },
              {
                "name": "dev",
                "in": "path",
                "description": "Dev ID.",
                "required": true,
                "allowReserved": true,
                "schema": {
                  "type": "string",
                  "default": "tag"
                }
              }
            ],
            "produces": [
              "application/json"
            ],
            "responses": {
              "201": {
                "description": "Success"
              },
              "401": {
                "description": "Access denied"
              },
              "404": {
                "description": "service not available"
              }
            }
          }
        }
      },
      "components": {        
      "securitySchemes": {
        "bearerAuth": {
          "type": "http",
          "scheme": "bearer",
          "bearerFormat": "JWT"
        }
      }
    }
    }   